
//  ph√≠m t·∫Øt t·∫°o nhanh component ctrl+ space , rafce
import React, { useEffect, useState } from 'react'
import Results from './Results';

const quizData = [
    {
        question: "Bi·∫øn n√†o sau ƒë√¢y l√† h·ª£p l·ªá trong JavaScript?",
        options: ["1variable", "_variable", "var-name", "var name"],
        answer: "_variable",
    },
    {
        question:
            "Trong JavaScript, ki·ªÉu d·ªØ li·ªáu n√†o sau ƒë√¢y l√† ki·ªÉu d·ªØ li·ªáu nguy√™n th·ªßy (primitive)?",
        options: ["object", "array", "string", "function"],
        answer: "string",
    },
    {
        question:
            "Thu·∫≠t to√°n s·∫Øp x·∫øp n√†o sau ƒë√¢y c√≥ ƒë·ªô ph·ª©c t·∫°p trung b√¨nh l√† O(n log n)?",
        options: ["Bubble Sort", "Insertion Sort", "Merge Sort", "Linear Sort"],
        answer: "Merge Sort",
    },
    {
        question: "K·∫øt qu·∫£ c·ªßa `typeof null` trong JavaScript l√† g√¨?",
        options: ["'null'", "'undefined'", "'object'", "'number'"],
        answer: "'object'",
    },
    {
        question: "B·ªô nh·ªõ Stack d√πng ƒë·ªÉ l√†m g√¨?",
        options: [
            "L∆∞u tr·ªØ d·ªØ li·ªáu d·∫°ng h√†ng ƒë·ª£i",
            "L∆∞u tr·ªØ c√°c l·ªùi g·ªçi h√†m (function calls)",
            "L∆∞u ·∫£nh",
            "L∆∞u video",
        ],
        answer: "L∆∞u tr·ªØ c√°c l·ªùi g·ªçi h√†m (function calls)",
    },
    {
        question: "To√°n t·ª≠ n√†o so s√°nh nghi√™m ng·∫∑t gi√° tr·ªã v√† ki·ªÉu d·ªØ li·ªáu?",
        options: ["==", "===", "!=", "="],
        answer: "===",
    },
    {
        question: "JSON l√† vi·∫øt t·∫Øt c·ªßa g√¨?",
        options: [
            "Java Syntax Object Notation",
            "JavaScript Object Notation",
            "JavaScript Online Network",
            "Java Server Object Notation",
        ],
        answer: "JavaScript Object Notation",
    },
    {
        question:
            "C·∫•u tr√∫c d·ªØ li·ªáu n√†o ho·∫°t ƒë·ªông theo nguy√™n t·∫Øc FIFO (First In First Out)?",
        options: ["Stack", "Queue", "Array", "Linked List"],
        answer: "Queue",
    },
    {
        question: "C√¢u l·ªánh n√†o in ra n·ªôi dung trong console tr√¨nh duy·ªát?",
        options: ["print()", "console.log()", "echo()", "show()"],
        answer: "console.log()",
    },
    {
        question: "Khi b·∫°n vi·∫øt `let x;` trong JavaScript, gi√° tr·ªã ban ƒë·∫ßu c·ªßa x l√† g√¨?",
        options: ["null", "0", "undefined", "false"],
        answer: "undefined",
    },
    {
        question: "HTML l√† g√¨?",
        options: [
            "Ng√¥n ng·ªØ l·∫≠p tr√¨nh ƒë·ªÉ x·ª≠ l√Ω logic",
            "Ng√¥n ng·ªØ ƒë√°nh d·∫•u ƒë·ªÉ t·∫°o c·∫•u tr√∫c website",
            "Framework c·ªßa JavaScript",
            "Tr√¨nh duy·ªát web",
        ],
        answer: "Ng√¥n ng·ªØ ƒë√°nh d·∫•u ƒë·ªÉ t·∫°o c·∫•u tr√∫c website",
    },
    {
        question: "Trong thu·∫≠t to√°n, Big O d√πng ƒë·ªÉ ƒëo g√¨?",
        options: [
            "T·ªëc ƒë·ªô m·∫°ng",
            "Th·ªùi gian load ·∫£nh",
            "ƒê·ªô ph·ª©c t·∫°p c·ªßa thu·∫≠t to√°n",
            "Dung l∆∞·ª£ng RAM m√°y t√≠nh",
        ],
        answer: "ƒê·ªô ph·ª©c t·∫°p c·ªßa thu·∫≠t to√°n",
    },
];

const Quiz = () => {
    // useState l·∫•y ra ƒë√°p √°n ƒë√£ ch·ªçn
    const [optionSelected, setOptionSelected] = useState("")

    // 1 state d·∫°ng m·∫£ng ƒë·ªÉ l∆∞u c√°c c√¢u tr·∫£ l·ªùi l·∫°i
    // Khai b√°o state userAnswers v√† h√†m c·∫≠p nh·∫≠t setUserAnswers
    // useState(...) kh·ªüi t·∫°o gi√° tr·ªã ban ƒë·∫ßu cho state

    const [userAnswers, setUserAnswers] = useState(
        // T·∫°o ra m·ªôt m·∫£ng m·ªõi c√≥ ƒë·ªô d√†i b·∫±ng s·ªë l∆∞·ª£ng c√¢u h·ªèi trong quizData
        Array.from({ length: quizData.length })
        // üëâ V√≠ d·ª•: n·∫øu quizData.length = 5 th√¨ m·∫£ng n√†y l√†:
        // [undefined, undefined, undefined, undefined, undefined]
        // T·ª©c l√† ban ƒë·∫ßu ng∆∞·ªùi d√πng ch∆∞a ch·ªçn ƒë√°p √°n n√†o c·∫£
    );

    // state ƒë·ªÉ l∆∞u c√¢u ƒëang tr·∫£ l·ªùi
    const [currentQuestion, setCurrentQuestion] = useState(0);

    // state ƒë·ªÉ l∆∞u c·ªù k·∫øt th√∫c
    const [isQuizEnded, setisQuizEnded] = useState(false);

    //state ƒë·ªÉ l∆∞u gi√° tr·ªã c·ªßa ƒëi·ªÉm
    const [score, setScore] = useState(0);


    // h√†m ch·∫°y khi ch·ªçn ƒë√°p √°n
    const handleSelectedOption = (option, index) => {
        setOptionSelected(option);

        const newUserAnswers = [...userAnswers];
        newUserAnswers[currentQuestion] = index;
        setUserAnswers(newUserAnswers);
    };

    const goNext = () => {
        if (currentQuestion === quizData.length - 1) {

            setisQuizEnded(true);

        } else {
            setCurrentQuestion((prev) => prev + 1);
        }


    };

    const goBack = () => {
        if (currentQuestion > 0) {
            setCurrentQuestion((prev) => prev - 1);

        }
    };

    const restartQuiz = () => {
        setCurrentQuestion(0);
        setisQuizEnded(false);
        setOptionSelected("");
        setScore(0);
        setUserAnswers(Array.from({ length: quizData.length }));
    };
    useEffect(() => {
        // L·∫•y ch·ªâ s·ªë (index) c·ªßa ƒë√°p √°n m√† ng∆∞·ªùi d√πng ƒë√£ ch·ªçn cho c√¢u hi·ªán t·∫°i
        // userAnswers l√† m·∫£ng, m·ªói ph·∫ßn t·ª≠ t∆∞∆°ng ·ª©ng v·ªõi 1 c√¢u h·ªèi
        // V√≠ d·ª•: userAnswers = [2, 0, 1] ‚Üí nghƒ©a l√†:
        // - C√¢u 1 ch·ªçn option th·ª© 3
        // - C√¢u 2 ch·ªçn option th·ª© 1
        // - C√¢u 3 ch·ªçn option th·ª© 2
        const answer = Number(userAnswers[currentQuestion]);

        // L·∫•y ra n·ªôi dung (text) c·ªßa ƒë√°p √°n m√† ng∆∞·ªùi d√πng ƒë√£ ch·ªçn
        // quizData[currentQuestion] ‚Üí truy c·∫≠p v√†o c√¢u h·ªèi hi·ªán t·∫°i
        // .options ‚Üí m·∫£ng c√°c l·ª±a ch·ªçn c·ªßa c√¢u h·ªèi ƒë√≥
        // [answer] ‚Üí l·∫•y ra ph·∫ßn t·ª≠ theo ch·ªâ s·ªë ƒë√£ ch·ªçn ·ªü tr√™n
        const pastOptionSelected = quizData[currentQuestion].options[answer];

        // üëâ V√≠ d·ª• c·ª• th·ªÉ:
        // quizData[currentQuestion].options = ["A. H√† N·ªôi", "B. TP.HCM", "C. ƒê√† N·∫µng"];
        // userAnswers[currentQuestion] = 1
        // ‚Üí answer = 1
        // ‚Üí pastOptionSelected = "B. TP.HCM"

        if (answer !== undefined) {
            setOptionSelected(pastOptionSelected);
        } else {
            setOptionSelected("");
        }

    }, [currentQuestion, userAnswers]);

    useEffect(() => {
        if (optionSelected === quizData[currentQuestion].answer) {
            setScore((prev) => prev + 1)
        }
    }, [optionSelected]);


    if (isQuizEnded) {
        return <Results 
        score={score} 
        totalQuestionNum={quizData.length} 
        restartQuiz={restartQuiz} />
    }



    return (
        <div>
            <h2>C√¢u {currentQuestion + 1}</h2>
            <p className='question'>{quizData[currentQuestion].question}</p>


            {quizData[currentQuestion].options.map((option, index) => (
                <button
                    // className c√≥ ƒëi·ªÅu ki·ªán:
                    // N·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn ƒë√°p √°n n√†y (optionSelected === option)
                    // th√¨ th√™m class "selected" ƒë·ªÉ ƒë·ªïi m√†u ho·∫∑c style kh√°c.
                    className={`option ${optionSelected === option ? "selected" : ""}`}

                    // disabled: n·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn m·ªôt ƒë√°p √°n r·ªìi,
                    // th√¨ c√°c n√∫t c√≤n l·∫°i s·∫Ω b·ªã v√¥ hi·ªáu h√≥a (kh√¥ng b·∫•m ƒë∆∞·ª£c)
                    // !!optionSelected => true n·∫øu ƒë√£ ch·ªçn
                    // && optionSelected !== option => ch·ªâ disable nh·ªØng n√∫t KH√ÅC v·ªõi n√∫t ƒë√£ ch·ªçn
                    //disabled = (ƒë√£ ch·ªçn ƒë√°p √°n n√†o ƒë√≥) && (ƒë√°p √°n hi·ªán t·∫°i KH√îNG ph·∫£i ƒë√°p √°n ƒë√£ ch·ªçn)

                    disabled={!!optionSelected && optionSelected !== option}

                    // Khi ng∆∞·ªùi d√πng b·∫•m n√∫t, g·ªçi h√†m handleSelectedOption(option, index)
                    // ƒë·ªÉ x·ª≠ l√Ω logic ch·ªçn ƒë√°p √°n (l∆∞u state, ch·∫•m ƒëi·ªÉm, v.v.)
                    onClick={() => handleSelectedOption(option, index)}

                    // key: kh√≥a duy nh·∫•t cho m·ªói ph·∫ßn t·ª≠ trong .map() (React y√™u c·∫ßu)
                    key={option}
                >
                    {/* Hi·ªÉn th·ªã n·ªôi dung c·ªßa ƒë√°p √°n l√™n n√∫t */}
                    {option}
                </button>
            ))}


            {
                optionSelected ? (optionSelected === quizData[currentQuestion].answer ? (
                    <p className='correct-answer'>c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n ch√≠nh x√°c</p>
                ) : (
                    <p className='incorrect-answer'>c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n sai r·ªìi</p>
                )) : ("")
            }
            <p> ƒë√°p √°n b·∫°n ƒë√£ ch·ªçn: {optionSelected}</p>

            <div className='nav-buttons'>

                {/* N√∫t quay l·∫°i */}
                <button
                    onClick={goBack}                     // Khi b·∫•m ‚Üí g·ªçi h√†m goBack (v·ªÅ c√¢u tr∆∞·ªõc)
                    disabled={currentQuestion === 0}     // N·∫øu ƒëang ·ªü c√¢u ƒë·∫ßu ti√™n (index 0) ‚Üí disable n√∫t
                >
                    Quay l·∫°i
                </button>

                {/* N√∫t k·∫ø ti·∫øp */}
                <button
                    onClick={goNext}                     // Khi b·∫•m ‚Üí g·ªçi h√†m goNext (qua c√¢u k·∫ø)
                    disabled={!optionSelected}           // N·∫øu ch∆∞a ch·ªçn ƒë√°p √°n n√†o ‚Üí disable n√∫t

                >
                    {currentQuestion === quizData.length - 1 ? "Ho√†nh th√†nh Quiz" : "K·∫ø ti·∫øp"}
                </button>

            </div>
        </div>
    )
}

export default Quiz
